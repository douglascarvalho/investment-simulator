apply plugin: 'jacoco'

def fileFilter = ["**/R.class",
                  "**/R\$*.class",
                  "**/BuildConfig.*",
                  "**/Manifest*.*",
                  "android/**/*.*",
                  "**/Lambda\$*.class",
                  "**/Lambda.class",
                  "**/*Lambda.class",
                  "**/*Lambda*.class",
                  "**/*Lambda*.*",
                  "**/*Builder.*",
                  "**/*_MembersInjector.class",
                  "**/*_MembersInjector*.*",
                  "**/*_*Factory*.*",
                  "**/*Component*.*",
                  "**/model/*",
                  "**/*Module*.*"]

task jacocoTestReport(type: JacocoReport) {
    group = 'Reporting'
    description = "Generate Jacoco coverage reports for the debug build. Only unit tests."

    dependsOn ":feature:simulation:testDebugUnitTest"
    dependsOn "createDebugCoverageReport"

    classDirectories.from = files([
            fileTree(dir: "$project.rootDir/feature/simulation/build/intermediates/javac/debug", excludes: fileFilter),
            fileTree(dir: "$project.rootDir/feature/simulation/build/tmp/kotlin-classes/debug", excludes: fileFilter)

    ])

    def coverageSourceDirs = [
            "$project.rootDir/feature/simulation/src/main/java"
    ]

    additionalSourceDirs.from = files(coverageSourceDirs)
    sourceDirectories.from = files(coverageSourceDirs)
    executionData.from = fileTree(dir: project.rootDir, includes: ["**/*.exec", "**/*.ec"])


    reports {
        xml.enabled = true
        html.enabled = true
    }
}